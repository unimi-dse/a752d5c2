db$city
db<- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(db$city)
df <- data.frame(date, value, city)
df
city <- c(db$city)
city
city <- c(as.charachter(db$city))
city
db<- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
city <- c(as.charachter(db$city))
city
db<- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
#function that creates dataframes to be used in the shiny app, starting from existing csv files.
# createDF<- function(pm_city){
# city <- substr(pm_city, 6, nchar(pm_city))
# db<- read.csv(paste0(pm_city,".csv"))
# date_city <- as.Date(db$utc, format("%d/%m/%y"))
# date <- c(date_city)
# value <- c(db$value)
# city <- c(city)
# df <- data.frame(date, value, city)
# return(df)
# }
db<- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- db
stack_databis <- db
#application of the function on the csv files
# dfrome <- createDF("rome")
# dfberlin <- createDF("berlin")
# dfporto <- createDF("porto")
# dfparis <- createDF("paris")
#combination of dataframes
# stack_data <-rbind(dfrome, dfberlin, dfparis, dfporto)
# stack_databis <- rbind(dfrome, dfberlin, dfparis, dfporto)
#server of the application
server<- shinyServer(
function(input, output){
datasetInput <- reactive({
dplyr::filter(stack_data, stack_data$city == input$dataset)
})
datasetInputbis <- reactive({
dplyr::filter(stack_databis,stack_databis$city == input$datasetbis)
})
#Summary information of the pm10 concentration for the first country
output$summary <- renderPrint({
dataset <-datasetInput()
summary(dataset$value)
})
#Summary information of the pm10 concentration for the second country
output$summarybis <- renderPrint({
datasetbis <-datasetInputbis()
summary(datasetbis$value)
})
#t-test output applied on the two cities selected
output$test <- renderPrint({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
First_city <- dataset$value
Second_city <- datasetbis$value
t.test(First_city, Second_city, alternative = "two.sided", conf.level = 0.95)
})
#time series graph output with the two series in the same graph
output$ts_plot <- renderPlot({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$dataset), dataset)+
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$datasetbis), datasetbis)+
ggplot2::scale_color_discrete(name = "Legenda:")+
ggplot2::geom_hline(colour="red", ggplot2::aes(yintercept=50)) +
ggplot2::labs(title="PM10 Concentration",
subtitle="Analysis from 27 October to 31 December",
x = "Date", y="pm10 (µg/m^3)") +
ggplot2::theme(plot.margin = ggplot2::margin(0.5, 0.5, 0.5, 0.5, "cm"))+
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold"))
})
#boxplot for the first city selected
output$boxplot_main <- renderPlot({
dataset <- datasetInput()
ggplot2::ggplot(dataset, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() +  ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$dataset)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
#boxplot for the second city selected
output$boxplot_comparing <- renderPlot({
datasetbis <- datasetInputbis()
ggplot2::ggplot(datasetbis, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() + ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$datasetbis)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
})
as.ca
pm10_db <- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
?convert
save(pm10_db, "pm10_db.rda")
?save
save(pm10_db, file = "pm10_db.rda")
devtools::
devtools::document()
devtools::document()
shiny::runApp('inst/pm10')
db<- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- db
stack_databis <- db
summary(stack_data)
runApp('inst/pm10')
#function that creates dataframes to be used in the shiny app, starting from existing csv files.
# createDF<- function(pm_city){
# city <- substr(pm_city, 6, nchar(pm_city))
# db<- read.csv(paste0(pm_city,".csv"))
# date_city <- as.Date(db$utc, format("%d/%m/%y"))
# date <- c(date_city)
# value <- c(db$value)
# city <- c(city)
# df <- data.frame(date, value, city)
# return(df)
# }
# db<- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
# date_city <- as.Date(db$utc, format("%d/%m/%y"))
# date <- c(date_city)
# value <- c(db$value)
# city <- c(as.character(db$city))
# city
# df <- data.frame(date, value, city)
# df
# stack_data <- db
# stack_databis <- db
#application of the function on the csv files
# dfrome <- createDF("rome")
# dfberlin <- createDF("berlin")
# dfporto <- createDF("porto")
# dfparis <- createDF("paris")
#combination of dataframes
# stack_data <-rbind(dfrome, dfberlin, dfparis, dfporto)
# stack_databis <- rbind(dfrome, dfberlin, dfparis, dfporto)
#server of the application
# db<- pm10_db
db <- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db")
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- df
stack_databis <- df
server<- shinyServer(
function(input, output){
datasetInput <- reactive({
dplyr::filter(stack_data, stack_data$city == input$dataset)
})
datasetInputbis <- reactive({
dplyr::filter(stack_databis,stack_databis$city == input$datasetbis)
})
#Summary information of the pm10 concentration for the first country
output$summary <- renderPrint({
dataset <-datasetInput()
summary(dataset$value)
})
#Summary information of the pm10 concentration for the second country
output$summarybis <- renderPrint({
datasetbis <-datasetInputbis()
summary(datasetbis$value)
})
#t-test output applied on the two cities selected
output$test <- renderPrint({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
First_city <- dataset$value
Second_city <- datasetbis$value
t.test(First_city, Second_city, alternative = "two.sided", conf.level = 0.95)
})
#time series graph output with the two series in the same graph
output$ts_plot <- renderPlot({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$dataset), dataset)+
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$datasetbis), datasetbis)+
ggplot2::scale_color_discrete(name = "Legenda:")+
ggplot2::geom_hline(colour="red", ggplot2::aes(yintercept=50)) +
ggplot2::labs(title="PM10 Concentration",
subtitle="Analysis from 27 October to 31 December",
x = "Date", y="pm10 (µg/m^3)") +
ggplot2::theme(plot.margin = ggplot2::margin(0.5, 0.5, 0.5, 0.5, "cm"))+
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold"))
})
#boxplot for the first city selected
output$boxplot_main <- renderPlot({
dataset <- datasetInput()
ggplot2::ggplot(dataset, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() +  ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$dataset)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
#boxplot for the second city selected
output$boxplot_comparing <- renderPlot({
datasetbis <- datasetInputbis()
ggplot2::ggplot(datasetbis, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() + ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$datasetbis)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
})
runApp('inst/pm10')
db <- pm10_db
db
db <- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_databis
stack_data <- df
stack_databis <- df
stack_data
db<- read.csv("C:\\Users\\Notebook\\Desktop\\pm10_db.csv")
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
runApp('inst/pm10')
runApp('inst/pm10')
runApp('inst/pm10')
createDF<- function(pm_city){
city <- substr(pm_city, 6, nchar(pm_city))
db<- read.csv(paste0(pm_city,".csv"))
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(city)
df <- data.frame(date, value, city)
return(df)
}
#application of the function on the csv files
dfrome <- createDF("pm10_Rome")
dfberlin <- createDF("pm10_Berlin")
dfporto <- createDF("pm10_Porto")
dfparis <- createDF("pm10_Paris")
runApp()
runApp('inst/pm10')
createDF<- function(pm_city){
city <- substr(pm_city, 6, nchar(pm_city))
db<- read.csv(paste0(pm_city,".csv"))
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(city)
df <- data.frame(date, value, city)
return(df)
}
#application of the function on the csv files
dfrome <- createDF("pm10_Rome")
dfberlin <- createDF("pm10_Berlin")
dfporto <- createDF("pm10_Porto")
dfparis <- createDF("pm10_Paris")
runApp('inst/pm10')
createDF<- function(pm_city){
city <- substr(pm_city, 6, nchar(pm_city))
db<- read.csv(paste0(pm_city,".csv"))
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(city)
df <- data.frame(date, value, city)
return(df)
}
#application of the function on the csv files
dfrome <- createDF("pm10_Rome")
dfberlin <- createDF("pm10_Berlin")
dfporto <- createDF("pm10_Porto")
dfparis <- createDF("pm10_Paris")
db <- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- df
stack_databis <- df
db <- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- df
stack_databis <- df
server<- shinyServer(
function(input, output){
datasetInput <- reactive({
dplyr::filter(stack_data, stack_data$city == input$dataset)
})
datasetInputbis <- reactive({
dplyr::filter(stack_databis,stack_databis$city == input$datasetbis)
})
#Summary information of the pm10 concentration for the first country
output$summary <- renderPrint({
dataset <-datasetInput()
runApp('inst/pm10')
runApp('inst/pm10')
db <- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- df
stack_databis <- df
stack_data
stack_databis
summary(stack_data)
summary(stack_databis)
ui<- fluidPage(
titlePanel(h2("Pm10 Concentration Comparing", align="center")),
sidebarLayout(
sidebarPanel(
#the user can choose two country, using two select input tools.
selectInput(inputId= "dataset",
label= "Choose a city: ",
choices = c("Rome", "Berlin", "Paris", "Porto"),
selected = "Rome"),
selectInput(inputId= "datasetbis",
label= "Choose another city: ",
choices = c("Rome", "Berlin", "Paris", "Porto"),
selected = "Berlin")),
#creation of the tabs
mainPanel(
tabsetPanel(id = "tab",
tabPanel("Plot", plotOutput("ts_plot")),
tabPanel("Summary",
helpText("First city selected:"), verbatimTextOutput("summary"),
helpText("Second city selected:"),verbatimTextOutput("summarybis")),
tabPanel("T-test",
helpText("This test is used to determin whether the means of
the two groups are equal to each other:"),
verbatimTextOutput("test"),
helpText("If the p-value is larger than 0.05, the null hypothesis is accepted")),
tabPanel("BoxPlot", fluidRow(
column(5, plotOutput("boxplot_main")),
column(5, plotOutput("boxplot_comparing"))
))
))
)
)
db <- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- df
stack_databis <- df
server<- shinyServer(
function(input, output){
datasetInput <- reactive({
dplyr::filter(stack_data, stack_data$city == input$dataset)
})
datasetInputbis <- reactive({
dplyr::filter(stack_databis,stack_databis$city == input$datasetbis)
})
#Summary information of the pm10 concentration for the first country
output$summary <- renderPrint({
dataset <-datasetInput()
summary(dataset$value)
})
#Summary information of the pm10 concentration for the second country
output$summarybis <- renderPrint({
datasetbis <-datasetInputbis()
summary(datasetbis$value)
})
#t-test output applied on the two cities selected
output$test <- renderPrint({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
First_city <- dataset$value
Second_city <- datasetbis$value
t.test(First_city, Second_city, alternative = "two.sided", conf.level = 0.95)
})
#time series graph output with the two series in the same graph
output$ts_plot <- renderPlot({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$dataset), dataset)+
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$datasetbis), datasetbis)+
ggplot2::scale_color_discrete(name = "Legenda:")+
ggplot2::geom_hline(colour="red", ggplot2::aes(yintercept=50)) +
ggplot2::labs(title="PM10 Concentration",
subtitle="Analysis from 27 October to 31 December",
x = "Date", y="pm10 (µg/m^3)") +
ggplot2::theme(plot.margin = ggplot2::margin(0.5, 0.5, 0.5, 0.5, "cm"))+
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold"))
})
#boxplot for the first city selected
output$boxplot_main <- renderPlot({
dataset <- datasetInput()
ggplot2::ggplot(dataset, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() +  ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$dataset)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
#boxplot for the second city selected
output$boxplot_comparing <- renderPlot({
datasetbis <- datasetInputbis()
ggplot2::ggplot(datasetbis, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() + ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$datasetbis)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
})
runApp('inst/pm10')
db <- pm10_db
date_city <- as.Date(db$utc, format("%d/%m/%y"))
date <- c(date_city)
value <- c(db$value)
city <- c(as.character(db$city))
city
df <- data.frame(date, value, city)
df
stack_data <- df
stack_databis <- df
server<- shinyServer(
function(input, output){
datasetInput <- reactive({
dplyr::filter(stack_data, stack_data$city == input$dataset)
})
datasetInputbis <- reactive({
dplyr::filter(stack_databis,stack_databis$city == input$datasetbis)
})
#Summary information of the pm10 concentration for the first country
output$summary <- renderPrint({
dataset <-datasetInput()
summary(dataset$value)
})
#Summary information of the pm10 concentration for the second country
output$summarybis <- renderPrint({
datasetbis <-datasetInputbis()
summary(datasetbis$value)
})
#t-test output applied on the two cities selected
output$test <- renderPrint({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
First_city <- dataset$value
Second_city <- datasetbis$value
t.test(First_city, Second_city, alternative = "two.sided", conf.level = 0.95)
})
#time series graph output with the two series in the same graph
output$ts_plot <- renderPlot({
dataset <- datasetInput()
datasetbis <- datasetInputbis()
ggplot2::ggplot() +
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$dataset), dataset)+
ggplot2::geom_line(ggplot2::aes(x=date, y=value, colour=input$datasetbis), datasetbis)+
ggplot2::scale_color_discrete(name = "Legenda:")+
ggplot2::geom_hline(colour="red", ggplot2::aes(yintercept=50)) +
ggplot2::labs(title="PM10 Concentration",
subtitle="Analysis from 27 October to 31 December",
x = "Date", y="pm10 (µg/m^3)") +
ggplot2::theme(plot.margin = ggplot2::margin(0.5, 0.5, 0.5, 0.5, "cm"))+
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold"))
})
#boxplot for the first city selected
output$boxplot_main <- renderPlot({
dataset <- datasetInput()
ggplot2::ggplot(dataset, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() +  ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$dataset)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
#boxplot for the second city selected
output$boxplot_comparing <- renderPlot({
datasetbis <- datasetInputbis()
ggplot2::ggplot(datasetbis, ggplot2::aes(,y=value)) + ggplot2::geom_boxplot() + ggplot2::scale_y_continuous(limits = c(0, 70))+
ggplot2::labs(title= input$datasetbis)+
ggplot2::theme(axis.title.x=ggplot2::element_blank(), axis.text.x=ggplot2::element_blank(), axis.ticks.x=ggplot2::element_blank())
})
})
runApp('inst/pm10')
